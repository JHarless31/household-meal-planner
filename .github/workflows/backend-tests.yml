name: Backend Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt', 'backend/requirements-test.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      working-directory: backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Run linting
      working-directory: backend
      run: |
        pip install flake8 black isort
        flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check src tests
        isort --check-only src tests

    - name: Run unit tests
      working-directory: backend
      run: |
        pytest -m unit -v --cov=src --cov-report=xml --cov-report=term-missing

    - name: Run integration tests
      working-directory: backend
      env:
        DATABASE_URL: sqlite:///test.db
      run: |
        pytest -m integration -v

    - name: Run security tests
      working-directory: backend
      run: |
        pytest -m security -v

    - name: Check coverage threshold
      working-directory: backend
      run: |
        coverage report --fail-under=80

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: backend/coverage.xml
        flags: backend
        name: backend-coverage

    - name: Generate coverage badge
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        pip install genbadge[coverage]
        genbadge coverage -i backend/coverage.xml -o backend/coverage-badge.svg

    - name: Security scan with Bandit
      working-directory: backend
      run: |
        pip install bandit
        bandit -r src -f json -o bandit-report.json || true

    - name: Check for vulnerabilities
      working-directory: backend
      run: |
        pip install safety
        safety check --json || true

    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: py-cov-action/python-coverage-comment-action@v3
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        MINIMUM_GREEN: 90
        MINIMUM_ORANGE: 80
